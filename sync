#!/usr/bin/env node

var fs = require('fs');
var cp = require('child_process');

var VERSION = "1.0.1";


var watchPath;
var syncLocalPath;
var syncExcludeFile = "";
var syncRemotePath;
var syncVerbose = false;
var syncSimulate = false;
var sshPort = 22;
var sshUser;
var sshHost;
var startSyncToolDelay = 500;


if(process.argv.length <= 2) {
  console.log(usage());
  return;
}

var cmds = ["source", "userhostport", "destination"];
process.argv.forEach(function(param, index){
  if(index <= 1) return;

  if(param.indexOf("--") === 0) {
    var _value = param.slice(2).split("=");
    var key = _value.shift();
    var value = _value.join("");    
    switch(key) {
      case "exclude":
        syncExcludeFile = value;
        break;
      case "sync-delay":
        startSyncToolDelay = value;
        break;
      case "sync-verbose":
        syncVerbose = value == "true" ? true : false;
        break;
      case "sync-simulate":
        syncSimulate = value == "true" ? true : false;
        break;
    }
  } else if(cmds.length > 0) {
    var value = param;
    switch(cmds.shift()) {
      case "source":
        syncLocalPath = stripTrailingSlash(value);
        watchPath = syncLocalPath;          
        break;
      case "userhostport":
        try {
          var _tmp = value.split("@");
          sshUser = _tmp[0];
          var _tmp = _tmp[1].split(":");
          sshHost = _tmp[0];
          if(_tmp[1]) sshPort = _tmp[1];
        } catch(e) {
          var _portString = sshPort ? ":" + sshPort : "[:port]";
          console.log(usage("Invalid user@host[:port] (" + sshUser + "@" + sshHost + _portString + ")"));
          return;
        }
        break;
      case "destination":
        syncRemotePath = value;
        break;
    }
  } else {
  }    
});

if(!syncLocalPath) {
  console.log(usage("Invalid source " + syncLocalPath));
  return;
}

if(!sshUser || !sshHost || !sshPort) {
  var _portString = sshPort ? ":" + sshPort : "[:port]";
  console.log(usage("Invalid user@host[:port] (" + sshUser + "@" + sshHost + _portString + ")"));
  return;
}

if(!syncRemotePath) {
  console.log(usage("Invalid destination " + syncRemotePath));
  return;
}

if(syncExcludeFile.indexOf("/") !== 0) {
  syncExcludeFile = syncLocalPath + "/" + syncExcludeFile;
}

if(syncExcludeFile){
  if(!fs.existsSync(syncExcludeFile)) {
    console.log(usage("Unable to open exclude file " + syncExcludeFile));
    return false;
  }    
}

var watches = [];
var restartDirectoryReadTimeout = null;
var startSyncToolTimeout = null;
var readingDirectoriesFlag = false;
var syncingFlag = false;
var syncCount = 0;

sync();
init();

function init() {
  if(watches && watches.length > 0) {
    watches.forEach(function(dir){
      fs.unwatchFile(dir);
    });    
  }
  watches = [];
  readdir(watchPath);  
}

function readdir(path) {
  if(readingDirectoriesFlag) return false;
  readingDirectoriesFlag = true;

  cp.exec("find " + path + "", function(err, stdout, stderr) {
    if(err) {
      console.log("FATAL: Unable to build directory tree. Is command find available on your OS?");
      return;
    }

    var files = stdout.split('\n');
    if(files && files.length > 0) {
      files.forEach(function(file){
        if(file) startWatching(file);
      });
    }

    readingDirectoriesFlag = false;
  });
}

function startWatching(dir) {
  try {
    watches.push(dir);
    fs.watchFile(dir, function (event, filename) {
      if(startSyncToolTimeout) clearTimeout(startSyncToolTimeout);
      startSyncToolTimeout = setTimeout(function(){
        sync();
      }, startSyncToolDelay);
      
      if(restartDirectoryReadTimeout) clearTimeout(restartDirectoryReadTimeout);
      restartDirectoryReadTimeout = setTimeout(function(){
        init();
      }, 1000);

    });    
  } catch(e) {
    console.error("Unable to watch: " + dir);
  }
}

function sync() {

  if(syncingFlag) return false;
  syncingFlag = true;
  syncCount++;
  var date = new Date();

  console.log("Sync #" + syncCount + " " + addLeadingZero(date.getHours()) + ":" + addLeadingZero(date.getMinutes()) + ":" + addLeadingZero(date.getSeconds()));

  var command = [
    "/usr/bin/rsync",
    "--recursive",
    "--delete-during",
    "--force",
    "--progress",
    "--rsh='ssh -p " + sshPort + "'",
    syncLocalPath + "/",
    sshUser + "@" + sshHost + ":" + syncRemotePath 
  ];

  if(syncExcludeFile){
    if(fs.existsSync(syncExcludeFile)) {
      command.splice(-2, 0, "--exclude-from " + syncExcludeFile);  
    } else {
      console.log("Unable to open exclude file " + syncExcludeFile);
      syncingFlag = false;
      return false;
    }    
  }

  if(syncSimulate) command.splice(-2, 0, "--dry-run");

  var ls = cp.exec(command.join(" "), function(error, stdout, stderr) {
    if(error || stderr) {
      console.log(stderr); 
    } else {
      console.log(" - done");
    }
    if(syncVerbose || syncSimulate) {
      console.log("-------------");
      console.log(stdout);
    }

    syncingFlag = false;
  });
}

function usage(errorString) {
  var str = "";

  if(errorString) {
    str += "!!! " + errorString + "\n\n";
  }
  else {
    str += "sync  version " + VERSION + "\n";     
  }

  str += "Usage:\n sync [option]... source user@host[:port] destination\n\n";
  str += "Options:\n";
  str += " --exclude=filepath    path to \"exclude from sync file\" relative to source\n";
  str += " --sync-delay=n        wait for sync to happen\n";
  str += " --sync-verbose=bool   print more details about sync\n";
  str += " --sync-simulate=bool  simulate sync and print details about sync";

  return str;
}

function stripTrailingSlash(str) {
    if(str.substr(-1) == '/') {
        return str.substr(0, str.length - 1);
    }
    return str;
}

function addLeadingZero(value) {
  return value < 10 ? "0" + value : value;
}
